DROP TABLE IF EXISTS marks;
DROP TABLE IF EXISTS users_courses;
DROP TABLE IF EXISTS courses;
DROP TABLE IF EXISTS users;
DROP TABLE IF EXISTS roles;
DROP TABLE IF EXISTS statuses;
DROP TABLE IF EXISTS categories;
DROP SEQUENCE IF EXISTS user_seq;
DROP SEQUENCE IF EXISTS course_seq;
DROP SEQUENCE IF EXISTS category_seq;

CREATE TABLE roles(
	id INTEGER NOT NULL PRIMARY KEY,
	name VARCHAR(10) NOT NULL UNIQUE
);

CREATE TABLE statuses(
	id INTEGER NOT NULL PRIMARY KEY,
	name VARCHAR(20) NOT NULL UNIQUE
);

CREATE TABLE categories(
	category_id INTEGER NOT NULL GENERATED BY DEFAULT AS identity PRIMARY KEY,
	name VARCHAR(30) NOT NULL UNIQUE
);

CREATE TABLE users(
	user_id INTEGER NOT NULL GENERATED BY DEFAULT AS identity PRIMARY KEY,
	login VARCHAR(30) NOT NULL UNIQUE,
	password VARCHAR(30) NOT NULL,
	first_name VARCHAR(20) NOT NULL,
	last_name VARCHAR(20) NOT NULL,
	is_student BOOLEAN DEFAULT FALSE,
	is_blocked BOOLEAN DEFAULT FALSE,
	role_id INTEGER NOT NULL REFERENCES roles(id) ON DELETE CASCADE ON UPDATE RESTRICT
);

CREATE TABLE courses(
	id INTEGER NOT NULL GENERATED BY DEFAULT AS identity PRIMARY KEY,
	title VARCHAR(50) NOT NULL UNIQUE,
	duration INTEGER NOT NULL,
	price INTEGER NOT NULL,
	start_date DATE NOT NULL,
	teacher INTEGER NOT NULL REFERENCES users(user_id) ON DELETE CASCADE ON UPDATE RESTRICT,
	status INTEGER NOT NULL REFERENCES statuses(id)  ON DELETE CASCADE ON UPDATE RESTRICT,
	category INTEGER NOT NULL REFERENCES categories(category_id) ON DELETE CASCADE ON UPDATE RESTRICT,
	enrollment INTEGER NOT NULL
);

CREATE TABLE users_courses (
  userid INTEGER NOT NULL,
  course_id INTEGER NOT NULL,
  PRIMARY KEY (userid, course_id),
  FOREIGN KEY (userid) REFERENCES users(user_id) ON UPDATE CASCADE,
  FOREIGN KEY (course_id) REFERENCES courses(id) ON UPDATE CASCADE
);

CREATE TABLE marks (
    mark INTEGER NOT NULL CHECK(mark<=5),
	is_success BOOLEAN DEFAULT FALSE,
	evaluation_date DATE NOT NULL,
	student_id INTEGER NOT NULL REFERENCES users(user_id) ON DELETE CASCADE ON UPDATE RESTRICT,
	course_id INTEGER NOT NULL REFERENCES courses(id) ON DELETE CASCADE ON UPDATE RESTRICT,
	PRIMARY KEY (student_id, course_id)
);

CREATE SEQUENCE user_seq START 20;
CREATE SEQUENCE course_seq START 20;
CREATE SEQUENCE category_seq START 5;